"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Gantt;

var _h = _interopRequireDefault(require("../h"));

var _utils = require("../utils");

var _Layout = _interopRequireDefault(require("./Layout"));

var _DayHeader = _interopRequireDefault(require("./DayHeader"));

var _WeekHeader = _interopRequireDefault(require("./WeekHeader"));

var _MonthHeader = _interopRequireDefault(require("./MonthHeader"));

var _Grid = _interopRequireDefault(require("./Grid"));

var _Labels = _interopRequireDefault(require("./Labels"));

var _LinkLine = _interopRequireDefault(require("./LinkLine"));

var _Bar = _interopRequireDefault(require("./Bar"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var UNIT = {
  day: _utils.DAY / 28,
  week: 7 * _utils.DAY / 56,
  month: 30 * _utils.DAY / 56
};

function NOOP() {}

function Gantt(_ref) {
  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? NOOP : _ref$onClick,
      _ref$viewMode = _ref.viewMode,
      viewMode = _ref$viewMode === void 0 ? 'week' : _ref$viewMode,
      _ref$maxTextWidth = _ref.maxTextWidth,
      maxTextWidth = _ref$maxTextWidth === void 0 ? 140 : _ref$maxTextWidth,
      _ref$offsetY = _ref.offsetY,
      offsetY = _ref$offsetY === void 0 ? 60 : _ref$offsetY,
      _ref$rowHeight = _ref.rowHeight,
      rowHeight = _ref$rowHeight === void 0 ? 40 : _ref$rowHeight,
      _ref$barHeight = _ref.barHeight,
      barHeight = _ref$barHeight === void 0 ? 16 : _ref$barHeight,
      _ref$thickWidth = _ref.thickWidth,
      thickWidth = _ref$thickWidth === void 0 ? 1.4 : _ref$thickWidth,
      _ref$styleOptions = _ref.styleOptions,
      styleOptions = _ref$styleOptions === void 0 ? {} : _ref$styleOptions,
      _ref$showLinks = _ref.showLinks,
      showLinks = _ref$showLinks === void 0 ? true : _ref$showLinks,
      _ref$showDelay = _ref.showDelay,
      showDelay = _ref$showDelay === void 0 ? true : _ref$showDelay,
      start = _ref.start,
      end = _ref.end;
  var unit = UNIT[viewMode];
  var minTime = start.getTime() - unit * 48;
  var maxTime = end.getTime() + unit * 48;
  var width = (maxTime - minTime) / unit + maxTextWidth;
  var height = data.length * rowHeight + offsetY;
  var box = "0 0 ".concat(width, " ").concat(height);
  var current = Date.now();
  var styles = (0, _styles["default"])(styleOptions);
  return (0, _h["default"])("svg", {
    width: width,
    height: height,
    viewBox: box
  }, (0, _h["default"])(_Layout["default"], {
    styles: styles,
    width: width,
    height: height,
    offsetY: offsetY,
    thickWidth: thickWidth,
    maxTextWidth: maxTextWidth
  }), viewMode === 'day' ? (0, _h["default"])(_DayHeader["default"], {
    styles: styles,
    unit: unit,
    height: height,
    offsetY: offsetY,
    minTime: minTime,
    maxTime: maxTime,
    maxTextWidth: maxTextWidth
  }) : null, viewMode === 'week' ? (0, _h["default"])(_WeekHeader["default"], {
    styles: styles,
    unit: unit,
    height: height,
    offsetY: offsetY,
    minTime: minTime,
    maxTime: maxTime,
    maxTextWidth: maxTextWidth
  }) : null, viewMode === 'month' ? (0, _h["default"])(_MonthHeader["default"], {
    styles: styles,
    unit: unit,
    offsetY: offsetY,
    minTime: minTime,
    maxTime: maxTime,
    maxTextWidth: maxTextWidth
  }) : null, (0, _h["default"])(_Grid["default"], {
    styles: styles,
    data: data,
    width: width,
    height: height,
    offsetY: offsetY,
    rowHeight: rowHeight,
    maxTextWidth: maxTextWidth
  }), maxTextWidth > 0 ? (0, _h["default"])(_Labels["default"], {
    styles: styles,
    data: data,
    onClick: onClick,
    offsetY: offsetY,
    rowHeight: rowHeight
  }) : null, showLinks ? (0, _h["default"])(_LinkLine["default"], {
    styles: styles,
    data: data,
    unit: unit,
    height: height,
    current: current,
    offsetY: offsetY,
    minTime: minTime,
    rowHeight: rowHeight,
    barHeight: barHeight,
    maxTextWidth: maxTextWidth
  }) : null, (0, _h["default"])(_Bar["default"], {
    styles: styles,
    data: data,
    unit: unit,
    height: height,
    current: current,
    offsetY: offsetY,
    minTime: minTime,
    onClick: onClick,
    showDelay: showDelay,
    rowHeight: rowHeight,
    barHeight: barHeight,
    maxTextWidth: maxTextWidth
  }));
}