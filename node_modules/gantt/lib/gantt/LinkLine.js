"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = LinkLine;

var _h = _interopRequireDefault(require("../h"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function LinkLine(_ref) {
  var styles = _ref.styles,
      data = _ref.data,
      unit = _ref.unit,
      offsetY = _ref.offsetY,
      minTime = _ref.minTime,
      rowHeight = _ref.rowHeight,
      barHeight = _ref.barHeight,
      maxTextWidth = _ref.maxTextWidth;
  var x0 = maxTextWidth;
  var y0 = rowHeight / 2 + offsetY;
  var map = {};
  data.forEach(function (v, i) {
    map[v.id] = i;
  });
  return (0, _h["default"])("g", null, data.map(function (s, i) {
    if (!s.end || !s.start || !s.links) {
      return null;
    }

    return s.links.map(function (l) {
      var j = map[l.target];
      var e = data[j];
      if (!e || !e.start || !e.end) return null;
      var gap = 12;
      var arrow = 6;
      var mgap = e.type === 'milestone' ? barHeight / 2 : 0;
      var y1 = y0 + i * rowHeight;
      var y2 = y0 + j * rowHeight;
      var vgap = barHeight / 2 + 4;

      if (y1 > y2) {
        vgap = -vgap;
      }

      if (l.type === 'FS') {
        var x1 = x0 + (s.end - minTime) / unit;
        var x2 = x0 + (e.start - minTime) / unit - mgap;
        var p1 = [[x1, y1], [x1 + gap, y1]];

        if (x2 - x1 >= 2 * gap) {
          p1.push([x1 + gap, y2]);
        } else {
          p1.push([x1 + gap, y2 - vgap]);
          p1.push([x2 - gap, y2 - vgap]);
          p1.push([x2 - gap, y2]);
        }

        p1.push([x2 - arrow, y2]);
        var p2 = [[x2 - arrow, y2 - arrow], [x2, y2], [x2 - arrow, y2 + arrow]];
        return (0, _h["default"])("g", null, (0, _h["default"])("polyline", {
          points: (0, _utils.p2s)(p1),
          style: styles.link
        }), (0, _h["default"])("polygon", {
          points: (0, _utils.p2s)(p2),
          style: styles.linkArrow
        }));
      }

      if (l.type === 'FF') {
        var _x = x0 + (s.end - minTime) / unit;

        var _x2 = x0 + (e.end - minTime) / unit + mgap;

        var _p = [[_x, y1], [_x + gap, y1]];

        if (_x2 <= _x) {
          _p.push([_x + gap, y2]);
        } else {
          _p.push([_x + gap, y2 - vgap]);

          _p.push([_x2 + gap, y2 - vgap]);

          _p.push([_x2 + gap, y2]);
        }

        _p.push([_x2 + arrow, y2]);

        var _p2 = [[_x2 + arrow, y2 - arrow], [_x2, y2], [_x2 + arrow, y2 + arrow]];
        return (0, _h["default"])("g", null, (0, _h["default"])("polyline", {
          points: (0, _utils.p2s)(_p),
          style: styles.link
        }), (0, _h["default"])("polygon", {
          points: (0, _utils.p2s)(_p2),
          style: styles.linkArrow
        }));
      }

      if (l.type === 'SS') {
        var _x3 = x0 + (s.start - minTime) / unit;

        var _x4 = x0 + (e.start - minTime) / unit - mgap;

        var _p3 = [[_x3, y1], [_x3 - gap, y1]];

        if (_x3 <= _x4) {
          _p3.push([_x3 - gap, y2]);
        } else {
          _p3.push([_x3 - gap, y2 - vgap]);

          _p3.push([_x4 - gap, y2 - vgap]);

          _p3.push([_x4 - gap, y2]);
        }

        _p3.push([_x4 - arrow, y2]);

        var _p4 = [[_x4 - arrow, y2 - arrow], [_x4, y2], [_x4 - arrow, y2 + arrow]];
        return (0, _h["default"])("g", null, (0, _h["default"])("polyline", {
          points: (0, _utils.p2s)(_p3),
          style: styles.link
        }), (0, _h["default"])("polygon", {
          points: (0, _utils.p2s)(_p4),
          style: styles.linkArrow
        }));
      }

      if (l.type === 'SF') {
        var _x5 = x0 + (s.start - minTime) / unit;

        var _x6 = x0 + (e.end - minTime) / unit + mgap;

        var _p5 = [[_x5, y1], [_x5 - gap, y1]];

        if (_x5 - _x6 >= 2 * gap) {
          _p5.push([_x5 - gap, y2]);
        } else {
          _p5.push([_x5 - gap, y2 - vgap]);

          _p5.push([_x6 + gap, y2 - vgap]);

          _p5.push([_x6 + gap, y2]);
        }

        _p5.push([_x6 + arrow, y2]);

        var _p6 = [[_x6 + arrow, y2 - arrow], [_x6, y2], [_x6 + arrow, y2 + arrow]];
        return (0, _h["default"])("g", null, (0, _h["default"])("polyline", {
          points: (0, _utils.p2s)(_p5),
          style: styles.link
        }), (0, _h["default"])("polygon", {
          points: (0, _utils.p2s)(_p6),
          style: styles.linkArrow
        }));
      }

      return null;
    });
  }));
}